class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int row=matrix.size(); //no. of rows
        int col=matrix[0].size();// no. of column
        int total=row*col; // total number of element
        int count=0;
        
        // this are the index 
        int startingrow=0;
        int startingcol=0;
        int endingrow=row-1;
        int endingcol=col-1;
        int dir=0;
        
        while(count<total){

            //printing starting row
            if(dir==0){
                for(int i=startingcol; count<total && i<=endingcol;i++){
                    ans.push_back(matrix[startingrow][i]);
                    count++;
                }
                startingrow++;
            }

            //printing ending column
            else if(dir==1){
                for(int i=startingrow; count<total && i<=endingrow;i++){
                    ans.push_back(matrix[i][endingcol]);
                    count++;
                }
                endingcol--;
            }

            //printing ending row
            else if(dir==2){
                for(int i=endingcol;count<total && i>=startingcol;i--){
                    ans.push_back(matrix[endingrow][i]);
                    count++;
                }
                endingrow--;
            }

            //printing starting column

            else if( dir==3){
                for(int i=endingrow;count<total && i>=startingrow;i--){
                    ans.push_back(matrix[i][startingcol]);
                    count++;
                }
                startingcol++;
            }
            // to get the direction
            dir=(dir+1)%4;
        }
        return ans;
    }
};
