//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int cnt=0;
    void merge(vector<long long>&nums, vector<long long>&left, vector<long long>&right){
        int i=0;
        int j=0;
        int k=0;

        while(i<left.size()&&j<right.size()){
            
            if(left[i]<=right[j]){
                nums[k++]=left[i++];
                
            }
            else{
                
                nums[k++]=right[j++];
                cnt+=left.size()-i;
                
            }
        }
        while(i<left.size()){
            nums[k++]=left[i++];
        }
        while(j<right.size()){
            nums[k++]=right[j++];
        }
    }
     void mergesort(vector<long long> &nums){
        if(nums.size()<=1){
            return; 
        }
        
        long long int mid=nums.size()/2;
       
        vector<long long>left(mid);
        vector<long long>right(nums.size()-mid);
        
        for(int i=0;i<mid;i++){
            left[i]=nums[i];
            
        }
        
        for(int i=mid;i<nums.size();i++){
            right[i-mid]=nums[i];
        }
        
        
        mergesort(left);
        mergesort(right);
        
        merge(nums,left,right);
        
    }
    
    
    long long int inversionCount(long long arr[], long long n)
    {
    vector<long long>nums;
    for(int i=0;i<n;i++) nums.push_back(arr[i]);
    
    mergesort(nums);
    return cnt;
    }

};


//{ Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

// } Driver Code Ends
