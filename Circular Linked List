#include<iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    Node(int d) {
        this->data = d;
        this->next = NULL;
    }
    
    ~Node(){
        int val=this->data;;
        if(this->next != NULL){
            delete next;
            next = NULL;
        }
        cout<<"deleting the value = "<<val<<endl;
    }
};

void insertnode(Node* &tail,int element,int d){
    if(tail == NULL){
        Node* temp = new Node(d);
        tail=temp;
        temp->next=temp;
    }
    else{
        Node* curr=tail;
        
        while(curr->data != element){
            curr = curr->next;
        }
        
        Node* temp = new Node(d);
        temp->next = curr->next;
        curr->next = temp;
    }
    
}

void print(Node* tail){
    Node* temp = tail;
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(tail != temp);
    
    cout<<endl;
}

void deletenode(Node* &tail, int element){
    
    //empty list
    if(tail == NULL){
        cout<<"empty list";
        return;
    }
    else{
        
        Node* prev = tail;
        Node* curr = prev->next;
        
        while(curr->data != element){
            prev=curr;
            curr=curr->next;
        }
        
        prev->next = curr->next;
        
        //for single node list
        if(curr == prev){
            tail=NULL;
        }
        
        else if(tail == curr){
            tail = prev;
        }
        
        curr->next = NULL;
        delete curr;
        
    }
}

int main(){
    
    Node* tail=NULL;
    
    insertnode(tail,5,3);
    print(tail);
    
    insertnode(tail,3,4);
    print(tail);
    
    insertnode(tail,4,6);
    print(tail);
    
    insertnode(tail,4,5);
    print(tail);
    
    insertnode(tail,6,7);
    print(tail);
    
    insertnode(tail,7,8);
    print(tail);
    
    deletenode(tail,4);
    print(tail);
    
    return 0;
}
