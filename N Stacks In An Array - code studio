#include <bits/stdc++.h> 

class NStack

{
    int *arr;
    int *next;
    int *top;
    int n,s;
    int freespot;
public:
    // Initialize your data structure.
    NStack(int N, int S)
    {
        n = N;
        s = S;
        arr = new int[s];
        next = new int[s];
        top = new int[n];
       //Initialize the top array
       //top->repesent index of top element
        for(int i=0;i < n;i++)
        {
            top[i] = -1;
        }
       //Initialize the next array
       //next->1.point to next element after stack
       //->2.point next freespot
        for(int i=0;i < s;i++)
        {
            next[i] = i+1;
        }
        //update the last index value to -1
        next[s-1] = -1;
        //initialize the freespot
        freespot = 0;
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m)
    {   
        //check if the stack is full
        if(freespot == -1)
        {
            return false;
        }
        //finding index of freespot
        int index = freespot;
        //update the freespot
        freespot = next[index];
        //insert the element in the array
        arr[index] = x;
        //update next to puranawala top
        next[index] = top[m-1];
        //update the top
        top[m-1] = index;
        return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m)
    {
        //check if stack is underflow
        if(top[m-1] == -1)
        {
            return -1;
        }
      //just do reverse of the push operation 
        int index = top[m-1];
        top[m-1] = next[index];
        next[index] = freespot;
        freespot = index;
       return arr[index];
    }

};
