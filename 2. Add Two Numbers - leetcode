/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL && l2==NULL){
            return NULL;
        }
        ListNode* temp=new ListNode(0);
        int sum=l1->val+l2->val;
        int carry=sum/10;
        temp->val=(sum%10);
        l1=l1->next;
        l2=l2->next;
        ListNode* k=temp;
        while(l1!=NULL && l2!=NULL){
            sum=l1->val+l2->val+carry;
            l1=l1->next;l2=l2->next;
            ListNode* m=new ListNode(sum%10);
            carry=sum/10;
            k->next=m;
            k=m;
        }
        if(l1!=NULL){
            while(l1!=NULL){
                sum=l1->val+carry;
                l1=l1->next;
                ListNode* m=new ListNode(sum%10);
                carry=sum/10;
                k->next=m;
                k=m;
            }
        }
        if(l2!=NULL){
            while(l2!=NULL){
                sum=l2->val+carry;
                l2=l2->next;
                ListNode* m=new ListNode(sum%10);
                carry=sum/10;
                k->next=m;
                k=m;
            }
        }
        if(carry!=0){
            ListNode* m=new ListNode(carry);
            k->next=m;
            k=m;
        }
        return temp;
    }
};
