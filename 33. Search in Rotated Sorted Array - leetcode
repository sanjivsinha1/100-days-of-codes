class Solution {
public:

int find_pivot(vector<int>& nums){
    int n=nums.size();
    int start=0;
    int end = n-1;
    while(start<end){
        int mid = start+(end - start)/2;
        if(nums[mid]>=nums[0]){
            start=mid+1;
        }
        else{
            end = mid;
        }
    }
    return start;
}


int BS(vector<int>& nums,int s , int e , int key){
    int start=s;
    int end=e;
    int mid = start+(end-start)/2;
    while(start<=end){
        mid = start+(end-start)/2;
        if(nums[mid]==key){
            return mid;
        }
        else if(nums[mid]>key){
            end=mid-1;
        }
        else{
            start=mid+1;
        }
    }
    return -1;
}

    int search(vector<int>& nums, int target) {
        int pivot = find_pivot(nums);
        int n = nums.size();
    if(target>=nums[pivot] && target<=nums[n-1]){
       return BS(nums ,pivot , n-1 , target); 
    }
    else{
        return BS(nums , 0,pivot-1,target);
    }
    }
};
