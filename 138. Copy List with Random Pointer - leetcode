/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL) return NULL;
        
        //add copy node after each node
        Node* ptr = head;
        while(ptr != NULL) {
            Node* newNode = new Node(ptr->val);
            newNode->next = ptr->next;
            ptr->next = newNode;
            ptr = ptr->next->next;
        }

        //joining random node of copy node wrt original node
        ptr = head;
        while(ptr != NULL) {
            if(ptr->random != NULL) {
                ptr->next->random = ptr->random->next;
            }
            ptr = ptr->next->next;
        }

        //separating copy nodes and forming a copy linked list
        //and regaining original links in original linked list
        ptr = head;
        Node* copyhead = new Node(-1);
        Node* nptr = copyhead;
        while(ptr != NULL) {
            nptr->next = ptr->next;
            ptr->next = ptr->next->next;
            ptr = ptr->next;
            nptr = nptr->next;
        }
        return copyhead->next;
    }
};
