/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root){
        if(root==NULL){      //check for tree present or not
            return 0;
        }
        int left=height(root->left); // traversing to the left end
        if(left==-1){   //return when any of the subtree is not balanced
            return -1;
        }

        int right=height(root->right);  // traversing to the right end
        if(right==-1){  //return when any of the subtree is not balanced
            return -1;
        }

        //to check if any subtree is not balanced 
        if(abs(left-right)>1){
            return -1;
        }

        //if the tree is balanced it will return the height of the tree as an indicator
        return max(left,right)+1;
    }
    bool isBalanced(TreeNode* root) {
        return height(root)!=-1;
    }
};
